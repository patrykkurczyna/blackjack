package pl.edu.agh.sr.server.impl;

import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Map;

import pl.edu.agh.sr.api.Blackjack;
import pl.edu.agh.sr.api.BlackjackException;
import pl.edu.agh.sr.api.BlackjackListener;
import pl.edu.agh.sr.api.UserToken;

public class BlackjackImpl implements Blackjack{

	private Table table;
	private static Integer counter = 1;
	private static Map<UserToken, BlackjackListener> registeredClients;
	
	public BlackjackImpl() {
		registeredClients = new HashMap<UserToken, BlackjackListener>();
		this.table = new Table();
	}
	
	public String getTableState(UserToken userToken) throws RemoteException, BlackjackException{
		if (!registeredClients.containsKey(userToken)) {
			throw new BlackjackException();
		} else {
			return this.table.toString();
		}	
	}
	
	public void makeChoice(UserToken userToken, boolean choice)
			throws RemoteException, BlackjackException {
		if (!registeredClients.containsKey(userToken)) {
			throw new BlackjackException();
		} else {
			String choiceString;
			if (choice) {
				this.table.pickCard(userToken);
				choiceString = "YES";
			} else {
				choiceString = "NO";
			}
			for (Map.Entry<UserToken, BlackjackListener> registeredClient : registeredClients.entrySet()) {
				registeredClient.getValue().onPlayersMove("Player with name --" + userToken.getUserName() +"-- says: " + choiceString + "\n"
						+ "Current table state: \n" + this.table.toString());					
			}
		}			
	}
	
	public UserToken register(String nick, BlackjackListener listener)
			throws RemoteException, BlackjackException {
		UserToken token = new UserTokenImpl(nick, counter);
		counter++;
		if (registeredClients.containsKey(token)) {
			throw new BlackjackException();
		} else {
			registeredClients.put(token, listener);
			System.out.println(registeredClients.keySet());
			System.out.println("New client registered: " + token);
		}
		return token;
	}
	
	public void unregister(UserToken token) throws RemoteException,
			BlackjackException {
		if (!registeredClients.containsKey(token)) {
			throw new BlackjackException();
		} else {
			registeredClients.remove(token);
		}
	}
	
	public void enterGame(UserToken token) throws RemoteException, BlackjackException {
		System.out.println(token);
		if (!registeredClients.containsKey(token)) {
			throw new BlackjackException();
		} else {
			if (this.table.addPlayer(token)) {
				System.out.println("Client: " + token.getUserName() + " enters the game!");
			} else {
				System.out.println("Table is full, cannot join!");
			}
		}
	}
	
	public void exitGame(UserToken token) throws RemoteException,
			BlackjackException {
		if (!registeredClients.containsKey(token)) {
			throw new BlackjackException();
		} else {
			registeredClients.remove(token);
		}		
	}
	
}
